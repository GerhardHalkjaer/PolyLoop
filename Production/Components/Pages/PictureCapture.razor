@page "/PictureCapture"
@using Services
@using Entities
@inject Service myServ
@inject IBIZ Biz
@using Production.Model
@rendermode InteractiveServer
@inject IJSRuntime JS
@using System.Diagnostics


@* <button @onclick="StartCameras">Start Cameras</button>
 *
 * <button @onclick="RequestCameras">Grant Camera Access</button>
 *@

<div>
    <video id="video1" autoplay playsinline crossorigin="anonymous" class="video-container" width="1280" height="960"></video>
    <button @onclick="() => CaptureAndSend(0)">Capture Camera 1</button>
</div>
<div>
    <video id="video2" autoplay playsinline crossorigin="anonymous" class="video-container" width="1280" height="960"></video>
    <button @onclick="() => CaptureAndSend(1)">Capture Camera 2</button>
</div>



@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RequestCameras();
            await StartCameras();
        }
               
    }


    /// <summary>
    /// Initializes and starts both cameras by invoking the JavaScript function.
    /// </summary>
    /// <returns></returns>
    private async Task StartCameras()
    {
        string[] videoIds = { "video1", "video2" };
        await JS.InvokeVoidAsync("startCameras", (object)videoIds);
    }

    /// <summary>
    /// Captures an image from the specified camera and sends it to the server.
    /// </summary>
    /// <param name="camIndex">The index of the camera (0 for first camera, 1 for second camera).</param>
    /// <returns></returns>
    private async Task CaptureAndSend(int camIndex)
    {

        Debug.WriteLine("starter");
        string videoId = camIndex == 0 ? "video1" : "video2";
        Debug.WriteLine(videoId);
        try
        {
            Debug.WriteLine($"Attempting to capture image from: {videoId}");
            string base64Image = await JS.InvokeAsync<string>("captureImage",videoId);
            Debug.WriteLine($"Captured image (Base64 length: {base64Image?.Length ?? 0})");

            if (!string.IsNullOrEmpty(base64Image))
            {
                await SendToServer(camIndex, base64Image);
            }
            else
            {
                Debug.WriteLine("No image captured.");
            }
        }
        catch (TaskCanceledException ex)
        {
            Debug.WriteLine($"TaskCanceledException: {ex.Message}");
        }
        catch (JSException ex)
        {
            Debug.WriteLine($"JSException: {ex.Message}");
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Unexpected error: {ex.Message}");
        }
    }

    /// <summary>
    /// used to send the image to the server
    /// TODO: not yet implemented
    /// </summary>
    /// <param name="camIndex"></param>
    /// <param name="base64Image"></param>
    /// <returns></returns>
    private async Task SendToServer(int camIndex, string base64Image)
    {
        var imageData = new WebcamImage { CameraIndex = camIndex, Base64Data = base64Image };
        // await Http.PostAsJsonAsync("api/webcam/upload", imageData);


        // Remove the data URL prefix (if it exists)
        string base64 = imageData.Base64Data;
        if (base64.StartsWith("data:image"))
        {
            var commaIndex = base64.IndexOf(',');
            base64 = base64.Substring(commaIndex + 1);
        }

        // Decode the base64 string into bytes
        byte[] imageBytes = Convert.FromBase64String(base64);

        // Specify a path to save the image
        string filePath = Path.Combine("C:\\codeFolder", $"camera_{imageData.CameraIndex}_image_{DateTime.Now.Ticks}.png");

        // Write the bytes to a file
        await File.WriteAllBytesAsync(filePath, imageBytes);

        Console.WriteLine($"Image saved to: {filePath}");


        //TODO: change to oneDrive location.

    }

    /// <summary>
    /// used to request camera access from the browser
    /// else the browser will not allow the camera to be accessed the 2nd camera
    /// </summary>
    /// <returns></returns>
    private async Task RequestCameras()
    {
        await JS.InvokeVoidAsync("requestCameras");
    }

}




