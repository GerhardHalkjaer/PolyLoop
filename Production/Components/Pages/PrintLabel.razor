@page "/PrintLabel"
@using Services
@using Entities
@using QRCoder

@using System.Drawing
@using System.Drawing.Printing;
@using System.Drawing.Imaging
@using System.IO

@using System.Net.Sockets
@using System.Text
@inject Service myServ
@inject IBIZ Biz
@rendermode InteractiveServer


<h3>PrintLabel</h3>


@code {
    //last page
    //take all the info from the object in biz and build a label to print
    //and print it
    //finish by resetting the object and return to first page

    // print size is 50mm x 62mm
    // try a QrCode size of 40mm x 40mm = 472px x 472px ?




    [Inject] NavigationManager Nav { get; set; } // Inject navigation service
    private bool _started = false;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_started)
        {
            _started = true;
            await InitializeProcessAsync();
        }
    }

    private async Task InitializeProcessAsync()
    {
        //TODO: check if Biz object has been filled out.

        await SavePackage(); // Save the package to the database

        await LabelPrint();

       

        Nav.NavigateTo("/");

    }

    

    public async Task SavePackage()
    {
        Biz.packagedUnit.UserPacking = 1;
        Biz.packagedUnit.Id = await myServ.PostPackagedUnitAsync(Biz.packagedUnit) ?? throw new Exception("Failed to get ID from API.");



    }

    public async Task LabelPrint()
    {

        var printDoc = new PrintDocument();
        printDoc.PrinterSettings.PrinterName = "Brother QL-820NWB Printer";
        printDoc.PrintPage += (s, e) =>
        {
            Graphics g = e.Graphics;


            using (var qr = new QRCodeGenerator())
            {
                // "ID:10000;NAME:PsHvid extra text;KG:500;Date:02-02-2025";
                QRCodeData data = qr.CreateQrCode($"ID:{Biz.packagedUnit.Id};NAME:{Biz.packagedUnit.SpecificType.Name};"
                + $"KG:{Biz.packagedUnit.weight};Date:{Biz.packagedUnit.ProcessedDate}", QRCodeGenerator.ECCLevel.Q);
                Bitmap qrImg = new QRCode(data).GetGraphic(10);
                
                int qrX = 10;
                int qrY = 10;
                int qrSize = 150;

                g.DrawImage(qrImg, qrX, qrY, qrSize, qrSize);


                // Rotate and draw text beside QR
                g.TranslateTransform(170, 150); // Move origin to where text should appear
                g.RotateTransform(-90); // Rotate counter-clockwise
                using Font font = new Font("Arial", 14, FontStyle.Bold);
                g.DrawString($"{Biz.packagedUnit.Id}", font, Brushes.Black, 0, -20);
                g.DrawString($"{Biz.packagedUnit.SpecificType.Name}", font, Brushes.Black, 0, 0);
                g.DrawString($"{Biz.packagedUnit.weight} Kg", font, Brushes.Black, 0, 20);

                // Reset transform for future drawing (optional)
                g.ResetTransform();

               
            }

        };

        printDoc.Print();

    }

   
    public byte[] GenerateQrCode(string text)
    {
        QRCodeGenerator qrGenerator = new QRCodeGenerator(); // initializes the QR code generator
        QRCodeData qrCodeData = qrGenerator.CreateQrCode(text, QRCodeGenerator.ECCLevel.Q); //generates the QR code data with a specified error correction level.
        QRCode qrCode = new QRCode(qrCodeData);
        Bitmap bitmap = qrCode.GetGraphic(20); // creates a bitmap image of the QR code with a pixel size of 20.
        MemoryStream ms = new MemoryStream();
        bitmap.Save(ms, ImageFormat.Png);
        return ms.ToArray();
    }
    
     
    
}
